// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: identify_1_1_0.proto

package identify_pb

import (
	fmt "fmt"
	proto "github.com/gogo/protobuf/proto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type Identify_1_1_0 struct {
	Common *IdentifyCommon `protobuf:"bytes,1,opt,name=common" json:"common,omitempty"`
	// signedPeerRecord contains a serialized SignedEnvelope containing a PeerRecord, signed by the sending node.
	// It contains listenAddrs of the peer i.e. multiaddrs the sender node listens for open connections on.
	// Since they are signed, we can share these authenticated addrs with other peers.
	// See github.com/libp2p/go-libp2p-core/record/pb/envelope.proto and
	// github.com/libp2p/go-libp2p-core/peer/pb/peer_record.proto for message definitions.
	//
	// We also extract extract the public key of the peer from this record ((which also gives its node.ID)).
	// We store it because we might want it if we change/disable the secure channel.
	SignedPeerRecord     []byte   `protobuf:"bytes,2,opt,name=signedPeerRecord" json:"signedPeerRecord,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Identify_1_1_0) Reset()         { *m = Identify_1_1_0{} }
func (m *Identify_1_1_0) String() string { return proto.CompactTextString(m) }
func (*Identify_1_1_0) ProtoMessage()    {}
func (*Identify_1_1_0) Descriptor() ([]byte, []int) {
	return fileDescriptor_4d1be631a8bc1104, []int{0}
}
func (m *Identify_1_1_0) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Identify_1_1_0) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Identify_1_1_0.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Identify_1_1_0) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Identify_1_1_0.Merge(m, src)
}
func (m *Identify_1_1_0) XXX_Size() int {
	return m.Size()
}
func (m *Identify_1_1_0) XXX_DiscardUnknown() {
	xxx_messageInfo_Identify_1_1_0.DiscardUnknown(m)
}

var xxx_messageInfo_Identify_1_1_0 proto.InternalMessageInfo

func (m *Identify_1_1_0) GetCommon() *IdentifyCommon {
	if m != nil {
		return m.Common
	}
	return nil
}

func (m *Identify_1_1_0) GetSignedPeerRecord() []byte {
	if m != nil {
		return m.SignedPeerRecord
	}
	return nil
}

func init() {
	proto.RegisterType((*Identify_1_1_0)(nil), "identify.pb.Identify_1_1_0")
}

func init() { proto.RegisterFile("identify_1_1_0.proto", fileDescriptor_4d1be631a8bc1104) }

var fileDescriptor_4d1be631a8bc1104 = []byte{
	// 142 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe2, 0x12, 0xc9, 0x4c, 0x49, 0xcd,
	0x2b, 0xc9, 0x4c, 0xab, 0x8c, 0x37, 0x8c, 0x37, 0x8c, 0x37, 0xd0, 0x2b, 0x28, 0xca, 0x2f, 0xc9,
	0x17, 0xe2, 0x86, 0x89, 0xea, 0x15, 0x24, 0x49, 0x89, 0xc2, 0x95, 0x24, 0xe7, 0xe7, 0xe6, 0xe6,
	0xe7, 0x41, 0xd4, 0x28, 0x15, 0x72, 0xf1, 0x79, 0xa2, 0xe8, 0x15, 0x32, 0xe6, 0x62, 0x83, 0xa8,
	0x90, 0x60, 0x54, 0x60, 0xd4, 0xe0, 0x36, 0x92, 0xd6, 0x43, 0x32, 0x46, 0x0f, 0xa6, 0xd8, 0x19,
	0xac, 0x24, 0x08, 0xaa, 0x54, 0x48, 0x8b, 0x4b, 0xa0, 0x38, 0x33, 0x3d, 0x2f, 0x35, 0x25, 0x20,
	0x35, 0xb5, 0x28, 0x28, 0x35, 0x39, 0xbf, 0x28, 0x45, 0x82, 0x49, 0x81, 0x51, 0x83, 0x27, 0x08,
	0x43, 0xdc, 0x89, 0xe7, 0xc4, 0x23, 0x39, 0xc6, 0x0b, 0x8f, 0xe4, 0x18, 0x1f, 0x3c, 0x92, 0x63,
	0x04, 0x04, 0x00, 0x00, 0xff, 0xff, 0x24, 0x9b, 0xe0, 0x2b, 0xbb, 0x00, 0x00, 0x00,
}

func (m *Identify_1_1_0) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Identify_1_1_0) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Identify_1_1_0) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.SignedPeerRecord != nil {
		i -= len(m.SignedPeerRecord)
		copy(dAtA[i:], m.SignedPeerRecord)
		i = encodeVarintIdentify_1_1_0(dAtA, i, uint64(len(m.SignedPeerRecord)))
		i--
		dAtA[i] = 0x12
	}
	if m.Common != nil {
		{
			size, err := m.Common.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintIdentify_1_1_0(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func encodeVarintIdentify_1_1_0(dAtA []byte, offset int, v uint64) int {
	offset -= sovIdentify_1_1_0(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *Identify_1_1_0) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Common != nil {
		l = m.Common.Size()
		n += 1 + l + sovIdentify_1_1_0(uint64(l))
	}
	if m.SignedPeerRecord != nil {
		l = len(m.SignedPeerRecord)
		n += 1 + l + sovIdentify_1_1_0(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func sovIdentify_1_1_0(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozIdentify_1_1_0(x uint64) (n int) {
	return sovIdentify_1_1_0(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *Identify_1_1_0) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowIdentify_1_1_0
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Identify_1_1_0: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Identify_1_1_0: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Common", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowIdentify_1_1_0
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthIdentify_1_1_0
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthIdentify_1_1_0
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Common == nil {
				m.Common = &IdentifyCommon{}
			}
			if err := m.Common.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SignedPeerRecord", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowIdentify_1_1_0
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthIdentify_1_1_0
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthIdentify_1_1_0
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SignedPeerRecord = append(m.SignedPeerRecord[:0], dAtA[iNdEx:postIndex]...)
			if m.SignedPeerRecord == nil {
				m.SignedPeerRecord = []byte{}
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipIdentify_1_1_0(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthIdentify_1_1_0
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthIdentify_1_1_0
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipIdentify_1_1_0(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowIdentify_1_1_0
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowIdentify_1_1_0
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowIdentify_1_1_0
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthIdentify_1_1_0
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupIdentify_1_1_0
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthIdentify_1_1_0
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthIdentify_1_1_0        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowIdentify_1_1_0          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupIdentify_1_1_0 = fmt.Errorf("proto: unexpected end of group")
)
